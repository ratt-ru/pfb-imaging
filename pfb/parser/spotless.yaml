inputs:
  _include:
    - (.)gridding.yml
    - (.)pdopts.yml
    - (.)pmopts.yml
    - (.)cgopts.yml
    - (.)dist.yml
    - (.)out.yml
  xds:
    info:
      Optional explicit path to xds.
      Set using output-filename and product by default.
  mds:
    info:
      Optional explicit path to mds.
      Set using output-filename, product and suffix by default.
  suffix:
    dtype: str
    default: 'main'
    info:
      Can be used to specify a custom name for the image space data products
  robustness:
    dtype: float
    abbreviation: rob
    default: 0.5
    info:
      Robustness factor for Briggs weighting. None means natural
  bases:
    dtype: str
    info: 'Wavelet bases to use. Give as comma separated str eg. '
    default: 'self,db1,db2'
    abbreviation: bases
  nlevels:
    dtype: int
    info: 'Wavelet decomposition level'
    default: 3
    abbreviation: nlevels
  l1-reweight-from:
    dtype: int
    default: 5
    info:
      L1 reweighting will kick in either at convergence or after this many
      iterations. Set to a negative value to disbale L1 reweighting.
  hess-norm:
    dtype: float
    abbreviation: hess-norm
    info:
      Spectral norm of hessian approximation
  hess-approx:
    dtype: str
    default: direct
    abbreviation: hess-approx
    choices: ['wgt','psf','direct']
    info:
      Which Hessian approximation to use.
      Set to wgt for vis space approximation, psf for zero-padded image
      space approximation and direct for direct inversion.
  rmsfactor:
    dtype: float
    default: 1.0
    info:
      By default will threshold by rmsfactor*rms at every iteration
  gamma:
    dtype: float
    default: 1.0
    info:
      Step size of update
  alpha:
    dtype: float
    default: 2
    info:
      Controls how aggressively the l1reweighting is applied.
      Larger values correspond to more agressive reweighting.
  positivity:
    dtype: int
    default: 1
    # choices: [0,1,2]
    info: |
      How to apply positivity constraint
      0 -> no positivity
      1 -> normal positivity constraint
      2 -> strong positivity i.e. all pixels in a band > 0
  niter:
    dtype: int
    default: 10
    abbreviation: niter
    info:
      Number of iterations.
  tol:
    dtype: float
    default: 5e-4
    info:
      Tolerance at which to terminate algorithm.
      Will stop when norm(x-xp)/norm(x) < tol
  diverge-count:
    dtype: int
    default: 5
    info:
      Will terminate the algorithm if the rms increases this many times.
      Set to larger than niter to disable this check.
  field-of-view:
    dtype: float
    abbreviation: fov
    info:
      Field of view in degrees
    metavar: DEG
  super-resolution-factor:
    dtype: float
    default: 2
    abbreviation: srf
    info:
      Will over-sample Nyquist by this factor at max frequency
  cell-size:
    dtype: float
    info:
      Cell size in arc-seconds
  nx:
    dtype: int
    info:
      Number of x pixels
  ny:
    dtype: int
    info:
      Number of y pixels
  psf-oversize:
    dtype: float
    default: 1.0
    abbreviation: psfo
    info:
      Size of PSF relative to dirty image
  target:
    dtype: str
    info:
      This can be predefined celestial objects known to astropy or a string in
      the format 'HH:MM:SS,DD:MM:SS' (note the , delimiter)
  l2-reweight-from:
    dtype: int
    default: 10
    info:
      Start doing L2 reweights from this iteration onwards.
      L2 reweights will also be triggered if the algorithm
      converges, L1 reweighting has already kicked in and
      l2-reweight-dof is set.
  l2-reweight-dof:
    dtype: float
    default: 3.5
    info:
      The degrees of freedom parameter for performing L2 reweighting.
      L2 reweighting is triggered if L1 reweighting is active and convergence
      is reached and will be applied a maximum of max-l2-reweight times.
  max-l2-reweight:
    dtype: int
    default: 5
    info:
      The maximum number of L2 reweighting steps.
  overwrite:
    dtype: bool
    default: false
    info:
      Hard reset the cache
  eta:
    dtype: float
    default: 1.0
    info:
      Value to add to Hessian to make it invertible

outputs:
  {}

policies:
  pass_missing_as_none: true
